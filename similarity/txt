# def build_data(queryset):
    
#     threshold_obj = Threshold.objects.filter(active=True).first()
    
#     data_dict = {}
    
#     years = [ year[0].year for year in queryset.values_list('year')]
#     distinct_years = list(set(years))
#     print('dist year<<<<<<<<<<<',distinct_years)
    
#     total_words = queryset.aggregate(total_words=Sum('word_count'))
    
#     if len(distinct_years) != int(threshold_obj.distinct_year):
#         data_dict['years_status'] = 'More years needed'
#     else:
#         data_dict['years_status'] = 'pass'
    
#     data_dict['total_words'] = total_words['total_words']
#     data_dict['total_files'] = queryset.values_list('file').count()
    
#     for year in distinct_years:
        
#         data_dict[year] = {}
        
#         year_querset=queryset.filter(created_at__year=year)
#         file_per_year=year_querset.values_list('file').count()
#         data_dict[year]['file_count'] = file_per_year
#         if file_per_year < int(threshold_obj.file_per_year):
#             data_dict[year]['files_status'] = 'More file needed'
#         else:
#             data_dict[year]['files_status'] = 'pass'
            
#         word_count_per_year = year_querset.aggregate(word_count=Sum('word_count'))
#         data_dict[year]['word_count'] = word_count_per_year['word_count']
#         if word_count_per_year['word_count'] < int(threshold_obj.words_per_year):
#             data_dict[year]['words_status'] = 'More words needed'
#         else:
#             data_dict[year]['words_status'] = 'pass'
    
#     return data_dict












         
#         # elif extension==".doc":
#         #     # file1=str(file)
#         #     # print(dir(file))
#         #     try:
#         #         ole = olefile.OleFileIO(file)
#         #     except Exception as e:
#         #         return Response({"file":" {}".format(e)},status=status.HTTP_400_BAD_REQUEST)
            
#         #     # try:
#         #     # # doctext = textract.process("{}".format(file1))
#         #     # # except Exception as e:
#         #     # #     return Response({"file":"File is Corrupted or ".format(e)},status=status.HTTP_400_BAD_REQUEST)
            
            
#         #     docx_file_path = str(file) + 'x' 
#         #     print("file>>>>>>>>>>>",file)
#         #     new_file=subprocess.run(['unoconv', '-f', 'docx', str(file)])
#         #     print("file>>>>>>>>",new_file)
#         #     # try:
#         #     doc = Document(docx_file_path)
#         #     # except Exception as e:
#         #     #     return Response({"file":"File is Corrupted or ".format(e)},status=status.HTTP_400_BAD_REQUEST)
#         #     docText = '\n\n'.join(paragraph.text for paragraph in doc.paragraphs)
#         #     doctext = textract.process(str(file))
#         #     print(doctext)
#         #     word_count=0
            
#         #     print("word_count_______________",word_count)
            
            
#         #     metadata = ole.get_metadata()
#         #     author=metadata.author
#         #     year=metadata.create_time
            
#         #     datetime = parser.parse(str(year))
#         #     if year is None or year=='':
#         #         return Response({"Year": "File Without Year Not Allowed {}".format(file)}, status=status.HTTP_400_BAD_REQUEST)
#         #     if author is None or author=='':
#         #         return Response({"Author": "{} does not have author ".format(file)}, status=status.HTTP_400_BAD_REQUEST)
#         #     full_path = "documents/" + urllib.parse.quote(file.name.replace(" ", "-"), safe="")
            
#         #     file_obj= File()
#         #     file = default_storage.save(full_path,file)
#         #     file_obj.author=author
#         #     file_obj.created_at=datetime
#         #     file_obj.file=file
#         #     file_obj.word_count=word_count
#         #     file_obj.save()
            
#         #     url = default_storage.url(file)
            
#         #     data_dict={"full_url": request.build_absolute_uri(url), 
#         #             "path": file_obj.file.name,
#         #             'author':file_obj.author,
#         #             'id': file_obj.id,
#         #             "created_at":file_obj.created_at,
#         #             'word_count':file_obj.word_count
#         #             }
            
#         #     return Response(data_dict, status=status.HTTP_200_OK)
        
        
        
#         >>> from  similarity.celery import app
# >>> app.purge
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# AttributeError: 'Celery' object has no attribute 'purge'
# >>> app.purge()
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# AttributeError: 'Celery' object has no attribute 'purge'
# >>> app.control.purge
# <bound method Control.purge of <celery.app.control.Control object at 0x7fdf262ef750>>
# >>> app.control.purge()
# 8
# >>> app.control.purge()
0